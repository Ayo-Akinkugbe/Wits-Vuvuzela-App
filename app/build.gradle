apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin:'org.sonarqube'

//tasks.sonarqube.dependsOn createTestReports

android {
    compileSdkVersion 28

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

   /* testOptions{
        unitTests.returnDefaultValues = true;
        unitTests.all{
            jacoco{
                includeNoLocationClasses = true;
            }
        }

    }*/

    defaultConfig {
        applicationId "com.example.wits_vuvuzela_app"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            //debuggable true
            testCoverageEnabled true
        }
    }

    lintOptions{
        abortOnError false
    }
}

task createTestReports(type: JacocoReport, dependsOn: ['testDevDebugUnitTest', 'createDevDebugCoverageReport']) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
            
            
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*$MembersInjector*.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/dev/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])

    executionData = files("${project.buildDir}/jacoco/testDevDebugUnitTest.exec")
    def files = fileTree("${buildDir}/outputs/code-coverage/connected/flavors/DEV/").filter { it.isFile() }.files.name
    //instrumentationFileName = "${buildDir}/outputs/code-coverage/connected/flavors/DEV/" + files[0];
}

/*
sonarqube{

    properties{

        property "sonar.projectName","Wits-Vuvuzela-App"
        property "sonar.projectKey","optisolcoms3009_Wits-Vuvuzela-App"
        property "sonar.host.url","http://localhost:9000"
        property "sonar.language","java"
        property "sonar.sources","src/main/java"
        property "sonar.java.sources","src/main/java"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.login","admin"
        property "sonar.password","admin"
    }
}*/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.google.firebase:firebase-auth:16.0.1'
    implementation 'com.google.firebase:firebase-database:16.0.1'
    // compile 'com.google.firebase:firebase-auth:16.1.0'
    testImplementation 'junit:junit:4.12'
  //  testImplementation 'org.robolectric:3.7.1'
    //androidTestUtik 'com.android.support.test:orchestrator:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'org.mockito:mockito-android:2.13.0'
    androidTestImplementation 'junit:junit:4.12'
    implementation files('libs/jsoup-1.11.3.jar')
}

apply plugin: 'com.google.gms.google-services'
