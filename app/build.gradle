apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin:'org.sonarqube'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    defaultConfig {
        applicationId "com.example.wits_vuvuzela_app"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        packagingOptions {
            exclude 'LICENSE.txt'
        }

        debug {
            debuggable true
            testCoverageEnabled true
        }
    }

    lintOptions{
        abortOnError false
    }
}
/*
jacoco {
    toolVersion = "0.7.4.201502262128"
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled false
    xml.enabled true
}*/


//jacoco {
 //   version "0.7.1.201405082137"
//}


task jacocoTestReportTest(type: JacocoReport, dependsOn: ['testDebugUnitTest']) { //we use "debug" build type for test coverage (can be other)
    group = "reporting"
    description = "Generate unified Jacoco code coverage report"

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
//        xml.destination = "${buildDir}/reports/jacocoTestReport.xml"
//        html.destination = "${buildDir}/reports/jacoco"
//        csv.destination = "${buildDir}/reports/jacocoTestReport.csv"
    }

    def fileFilter = [
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class', //Dagger2 generated code
            '*/*_MembersInjector*.*', //Dagger2 generated code
            '**/*_*Factory*.*', //Dagger2 generated code
            '*/*Component*.*', //Dagger2 generated code
            '**/*Module*.*' //Dagger2 generated code
    ]
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter) //we use "debug" build type for test coverage (can be other)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([javaDebugTree, kotlinDebugTree]) // we need to target both java and kotlin build folder
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", //we use "debug" build type for test coverage (can be other)
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
/*
sonarqube {
    properties {
        property "sonar.projectKey", "optisolcoms3009witsvuvuzela"
        property "sonar.projectName", "optisolcoms3009witsvuvuzela"
        property "sonar.projectVersion", "1.0"
        property "sonar.language","java"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", " app/src/main/java"
        property "sonar.java.sources","src/main/java"
        property "sonar.binaries", "app/build/intermediates/app_classes/debug/bundleDebugClasses"
        property "sonar.java.binaries", "app/build/intermediates/app_classes/debug/bundleDebugClasses"
        property "app/src/test/java, app/src/androidTest/java"
        property "sonar.java.test.binaries", "app/build/intermediates/app_classes/debug/bundleDebugClasses"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "./build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" //link to xml file that generated by jacoco

        //property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
    }
}*/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.google.firebase:firebase-core:16.0.9'
    implementation 'com.google.firebase:firebase-auth:17.0.0'
    implementation 'com.google.firebase:firebase-database:17.0.0'
    testImplementation 'junit:junit:4.12'
  //  testImplementation 'org.robolectric:3.7.1'
    //androidTestUtik 'com.android.support.test:orchestrator:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'org.mockito:mockito-android:2.13.0'
    androidTestImplementation 'junit:junit:4.12'
    implementation files('libs/jsoup-1.11.3.jar')
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:2.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'

    //androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0'
   // androidTestImplementation 'com.android.support.test:testing-support-lib:0.1'
}

apply plugin: 'com.google.gms.google-services'
